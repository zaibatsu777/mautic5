name: Mautic tests and validations

on:
  push:
    branches:
      - '[0-9].*'
  pull_request:
  schedule:
    # Run every day at 10:45 AM UTC to discover potential issues with dependencies like PHP updates etc.
    - cron: '45 10 * * *'

jobs:
  phpunit:
    # We don't want the scheduled jobs to run on forks of Mautic
    if: (github.event_name == 'schedule' && (github.repository == 'mautic/mautic' || github.repository == 'mautic/api-library') ) || (github.event_name != 'schedule')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ['7.4', '8.0']
        db-types: ['mysql', 'mariadb']
  
    name: PHPUnit ${{ matrix.php-versions }} ${{ matrix.db-types }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: mautictest
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      mariadb:
        image: mariadb:10.3
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: mautictest
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2
      # Codecov needs access to previous commits, so we add fetch-depth: 0
      with:
        fetch-depth: 0
    
    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql
        coverage: pcov
        ini-values: pcov.directory=., pcov.exclude="~tests|themes|vendor~"
    
    - name: add MySQL config file
      run: |
        mysqldump --version
        mysqldump --print-defaults
        cp .github/ci-files/.my.cnf ~/.my.cnf
        mysqldump --print-defaults

    - name: Set SYMFONY_ENV to test
      run: |
        echo "SYMFONY_ENV=test" >> $GITHUB_ENV
        echo "MAUTIC_ENV=test" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        composer validate
        composer install --prefer-dist --no-progress --no-suggest

    - name: Run tests - database = ${{ matrix.db-types }}
      run: |
        export DB_PORT_STRING="${{ matrix.db-types }}_port"
        export DB_PORT=${!DB_PORT_STRING}

        if [[ "${{ matrix.php-versions }}" == "8.0" ]] && [[ "${{ matrix.db-types }}" == "mariadb" ]]; then
          composer test -- --coverage-clover=coverage.xml
        else
          composer test
        fi
      env:
        mysql_port: ${{ job.services.mysql.ports[3306] }}
        mariadb_port: ${{ job.services.mariadb.ports[3306] }}

    - name: Upload coverage report
      if: ${{ matrix.php-versions == '8.0' && matrix.db-types == 'mariadb' && github.repository == 'mautic/mautic' }}
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml
        fail_ci_if_error: true

    - name: Slack Notification if tests fail
      uses: rtCamp/action-slack-notify@v2
      if: ${{ failure() && github.event_name == 'schedule' }}
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'The daily GitHub Actions tests in mautic/mautic have failed. Most likely something external has changed, like a PHP version update.'

    - name: Store log artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ matrix.php-versions }}-${{ matrix.db-types }}
        path: ./var/logs/*

  misc:
    # We don't want the scheduled jobs to run on forks of Mautic
    if: (github.event_name == 'schedule' && (github.repository == 'mautic/mautic' || github.repository == 'mautic/api-library') ) || (github.event_name != 'schedule')
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        commands: ['PHPSTAN', 'CS Fixer', 'Rector', 'scaffolded files mismatch', 'PHPStan baseline changes', 'composer install']
        php-versions: ['7.4', '8.0']

    name: ${{ matrix.commands }} - ${{ matrix.php-versions }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Rector Cache
      uses: actions/cache@v3
      with:
        path: ./var/cache/rector
        key: ${{ runner.os }}-rector-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-rector-

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v18.7

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Install dependencies
      run: |
        composer validate
        composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run ${{ matrix.commands }}
      run: |
        if [[ "${{ matrix.commands }}" == "PHPSTAN" ]]; then
          composer phpstan
        elif [[ "${{ matrix.commands }}" == "Rector" ]]; then
          export SYMFONY_ENV=test
          bin/console cache:warmup
          composer rector -- --dry-run --no-progress-bar
        elif [[ "${{ matrix.commands }}" == "CS Fixer" ]]; then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == *.php ]]; then
              cs_fix_files="${cs_fix_files} $file"
            fi
          done
          if [[ $cs_fix_files ]]; then
            bin/php-cs-fixer fix --config=.php-cs-fixer.php -v --dry-run --using-cache=no --show-progress=dots --diff $cs_fix_files
          fi
        elif [[ "${{ matrix.commands }}" == "scaffolded files mismatch" ]]; then
          wget -q -O /tmp/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod 755 /tmp/jq
          /tmp/jq -r '.extra["mautic-scaffold"]["file-mapping"] | to_entries[] | "diff -q \(.key | sub("\\[(project|web)-root\\]";".")) app/\(.value)"' app/composer.json > diff_commands.sh
          bash diff_commands.sh | tee /tmp/diff_command_output.txt
          rm diff_commands.sh
          if [[ $(wc -l </tmp/diff_command_output.txt) -ge 1 ]]; then
            echo "some scaffolded files were not updated"
            echo "Please apply the same changes in the files mentioned above"
            exit 1
          fi
        elif [[ "${{ matrix.commands }}" == "PHPStan baseline changes" ]]; then
          if [[ "${{ steps.changed-files.outputs.modified_files }}" == *"phpstan-baseline.neon"* ]]; then
            stat=$(git diff --shortstat "origin/${{ github.base_ref }}" ${{ github.sha }} -- phpstan-baseline.neon)
            echo $stat
            regex="[0-9]+[[:space:]]insertion"
            if [[ $stat =~ $regex ]]; then
              echo "There are modifications (added or changed lines) to the phpstan-baseline.neon"
              echo "Please fix the PHPStan errors instead of altering the baseline file"
              exit 1
            fi
          fi
        elif [[ "${{ matrix.commands }}" == "composer install" ]]; then
          # create a temp dir and mimic a composer install via mautic/recommended-project
          mkdir test_composer
          cd test_composer
          cp ../.github/ci-files/composer.json ./
          composer install
          
          # test if console works by generating assets for next step
          php ./bin/console mautic:assets:generate
          
          # test if media/css and media/js folder contain the same files as the tarball releases
          test -z "$(comm -23 <(ls ../media/js  | sort) <(ls docroot/media/js  | sort))"
          test -z "$(comm -23 <(ls ../media/css | sort) <(ls docroot/media/css | sort))"

          php ./bin/console cache:clear
        else
          echo "Invalid command"
          exit 1
        fi

    - name: Slack Notification if tests fail
      uses: rtCamp/action-slack-notify@v2
      if: ${{ failure() && github.event_name == 'schedule' }}
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'The daily GitHub Actions tests in mautic/mautic have failed. Most likely something external has changed, like a PHP version update.'
