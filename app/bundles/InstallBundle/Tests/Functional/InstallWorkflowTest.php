<?php

declare(strict_types=1);

namespace Mautic\InstallBundle\Tests\Functional;

use Mautic\CoreBundle\Test\IsolatedTestTrait;
use Mautic\CoreBundle\Test\MauticMysqlTestCase;
use PHPUnit\Framework\Assert;
use Symfony\Component\HttpFoundation\Request;

/**
 * This test must run in a separate process because it sets the global constant
 * MAUTIC_INSTALLER which breaks other tests.
 *
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class InstallWorkflowTest extends MauticMysqlTestCase
{
    use IsolatedTestTrait;

    protected $useCleanupRollback = false;

    private string $localConfigPath;

    protected function setUp(): void
    {
        parent::setUp();
        $this->localConfigPath = self::$container->get('kernel')->getLocalConfigFile();

        if (file_exists($this->localConfigPath)) {
            // Move local.php so we can get to the installer.
            rename($this->localConfigPath, $this->localConfigPath.'.bak');
        }
    }

    protected function tearDown(): void
    {
        if (file_exists($this->localConfigPath)) {
            // Remove the local.php generated by this test.
            unlink($this->localConfigPath);
        }
        if (file_exists($this->localConfigPath.'.bak')) {
            // Restore the local config file in it's original state.
            rename($this->localConfigPath.'.bak', $this->localConfigPath);
        }

        parent::tearDown();
    }

    public function testInstallWorkflow(): void
    {
        // Step 0: System checks.
        $crawler      = $this->client->request(Request::METHOD_GET, '/installer');
        $submitButton = $crawler->selectButton('install_check_step[buttons][next]');
        $form         = $submitButton->form();
        $crawler      = $this->client->submit($form);

        Assert::assertTrue($this->client->getResponse()->isOk());

        // Step 1: DB.
        $submitButton = $crawler->selectButton('install_doctrine_step[buttons][next]');
        $form         = $submitButton->form();

        $form['install_doctrine_step[host]']->setValue(getenv('DB_HOST'));
        $form['install_doctrine_step[port]']->setValue(getenv('DB_PORT'));
        $form['install_doctrine_step[name]']->setValue(getenv('DB_NAME'));
        $form['install_doctrine_step[user]']->setValue(getenv('DB_USER'));
        $form['install_doctrine_step[password]']->setValue(getenv('DB_PASSWD'));
        $form['install_doctrine_step[backup_tables]']->setValue('0');

        $crawler = $this->client->submit($form);
        Assert::assertTrue($this->client->getResponse()->isOk());

        // Step 2: Admin user.
        $submitButton = $crawler->selectButton('install_user_step[buttons][next]');
        $form         = $submitButton->form();

        $form['install_user_step[username]']->setValue('admin');
        $form['install_user_step[password]']->setValue('mautic');
        $form['install_user_step[firstname]']->setValue('admin');
        $form['install_user_step[lastname]']->setValue('mautic');
        $form['install_user_step[email]']->setValue('mautic@example.com');

        $crawler = $this->client->submit($form);
        Assert::assertTrue($this->client->getResponse()->isOk());

        $submitButton = $crawler->selectButton('install_email_step[buttons][next]');
        $form         = $submitButton->form();

        $form['install_email_step[mailer_from_name]']->setValue('admin');
        $form['install_email_step[mailer_from_email]']->setValue('mautic@example.com');
        $form['install_email_step[mailer_spool_type]']->setValue('memory');
        $form['install_email_step[mailer_transport]']->setValue('smtp');

        $crawler = $this->client->submit($form);
        Assert::assertTrue($this->client->getResponse()->isOk());

        $successText = $crawler->filter('.panel-body.text-center h5')->text();
        Assert::assertStringContainsString('Mautic is installed', $successText);
    }
}
